pragma solidity ^0.8.0;

import "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";

contract CoolCats is ERC721, VRFConsumerBase {
    using EnumerableSet for EnumerableSet.UintSet;
    EnumerableSet.UintSet private _claimedTokens;
    bytes32 public merkleRoot;
    mapping(bytes32 => bool) public usedNonces;
    uint256 public constant NUM_TOKENS = 10000;
    uint256 public constant PRICE = 0.05 ether;
    uint256 public constant MAX_TOKENS_PER_PURCHASE = 10;
    bytes32 internal keyHash;
    uint256 internal fee;

    constructor(address vrfCoordinator, address link, bytes32 _keyHash, uint256 _fee)
        ERC721("CoolCats", "CC")
        VRFConsumerBase(vrfCoordinator, link)
    {
        keyHash = _keyHash;
        fee = _fee;
    }

    function buy(uint256 numTokens) external payable {
        require(msg.value == numTokens * PRICE, "Invalid payment amount");
        require(totalSupply() + numTokens <= NUM_TOKENS, "Exceeds maximum token supply");
        require(numTokens <= MAX_TOKENS_PER_PURCHASE, "Exceeds maximum tokens per purchase");
        for (uint256 i = 0; i < numTokens; i++) {
            uint256 tokenId = totalSupply() + 1;
            _safeMint(msg.sender, tokenId);
        }
    }

    function withdraw() external onlyOwner {
        uint balance = address(this).balance;
        payable(msg.sender).transfer(balance);
    }

    function claim(bytes32[] calldata merkleProof, bytes32 randomness) external {
        require(!usedNonces[randomness], "Already used randomness");
        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
        require(MerkleProof.verify(merkleProof, merkleRoot, leaf), "Invalid proof");
        usedNonces[randomness] = true;
        uint256 index = uint256(leaf) % NUM_TOKENS + 1;
        require(!_claimedTokens.contains(index), "Already claimed");
        _claimedTokens.add(index);
        _safeMint(msg.sender, index);
    }

    function requestRandomness() public returns (bytes32) {
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK");
        uint256 seed = uint256(keccak256(abi.encodePacked(msg.sender, block.number, block.timestamp)));
        bytes32 requestId = requestRandomness(keyHash, fee, seed);
        return requestId;
    }

    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {
        // Do nothing
    }
}
